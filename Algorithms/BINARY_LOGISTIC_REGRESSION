{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "BINARY_LOGISTIC_REGRESSION",
      "provenance": [],
      "authorship_tag": "ABX9TyO2GrZGZ2ykCfqtsVXkqp3U",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Nikhileswar-Komati/100D_ML/blob/master/Algorithms/BINARY_LOGISTIC_REGRESSION\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H5IEJY4czDIJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P8zrUeEW3H1O",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = datasets.load_iris()\n",
        "X = data.data[:, :4] \n",
        "y = (data.target != 0) * 1  \n",
        "train_X, test_X, train_Y, test_Y = train_test_split(X, y, random_state = 42, test_size = 0.5)"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X7bamzrvAFvz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "f7ce13c7-88fc-4930-8e7b-51e78c7fdfa4"
      },
      "source": [
        "train_X.shape"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(75, 4)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VLIOw6fr4IyE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class LogisticRegressionFromScratch:\n",
        "  def __init__(self, learning_rate = 0.01, n_iterations = 1000):\n",
        "    self.learning_rate = learning_rate\n",
        "    self.n_iterations = n_iterations\n",
        "  def fit(self, x, y):\n",
        "    self.costs = list()\n",
        "    m = x.shape[0]\n",
        "    ones = np.ones((m, 1))\n",
        "    x = np.append(ones, x, axis = 1)\n",
        "    self.weights = np.random.rand(x.shape[1], 1)\n",
        "    for _ in range(self.n_iterations):\n",
        "      z = np.dot(x, self.weights)\n",
        "      h = 1 / (1 + np.exp(-z))\n",
        "      y = np.reshape(y, (y.shape[0], 1))\n",
        "      residuals = h - y\n",
        "      gradients = np.dot(x.T, residuals)\n",
        "      self.weights -= (self.learning_rate / m) * gradients\n",
        "      cost = (-y * np.log(h) - (1-y) * np.log(1 - h)).mean()\n",
        "      self.costs.append(cost)\n",
        "    return self\n",
        "  def predict(self, x):\n",
        "    ones = np.ones((x.shape[0], 1))\n",
        "    x = np.append(ones, x, axis = 1)\n",
        "    z = np.dot(x, self.weights)\n",
        "    h = 1 / (1 + np.exp(-z))\n",
        "    return h.round()"
      ],
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pk3QHqmm4NNJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "782ef095-51b3-459c-ea3b-195fa3fde177"
      },
      "source": [
        "model = LogisticRegressionFromScratch(learning_rate=0.1, n_iterations = 2000)\n",
        "var = model.fit(train_X, train_Y)\n",
        "y_pred = model.predict(test_X)\n",
        "print(accuracy_score(test_Y, y_pred))"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sbu8JcL2_RX8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "0215df79-b94c-4301-c81f-07e0cfc84183"
      },
      "source": [
        "x_var = np.array(range(2000))\n",
        "y_var = np.array(var.costs[:2000])\n",
        "sns.lineplot(x_var, y_var)"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fb6cb3998d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 62
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oo8V5c-L_h_5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}